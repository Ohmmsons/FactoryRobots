@startuml
class Simulator.Rectangle {
- boolean isOrthogonal(Point,Point,Point)
}
enum Simulator.RobotPowerState {
+  DELIVERING
+  CHARGING
+  STANDBY
+  RETURNING
}
class Simulator.TriangleFactory {
- Generator generator
+ Shape createShape()
}
class UI.SimulatorGUI {
- Color backgroundColor
- Color grayColor
- Color blackColor
- Stroke defaultStroke
- Stroke robotStroke
- MouseChecker mouseChecker
- KeyChecker keyChecker
- Semaphore pointSemaphore
- ArrayList<Shape> shapes
- Point point
- LinkedHashSet<Robot> robots
- boolean isKeyPressed
- ArrayList<Point> requests
- JLabel messageLabel
- int currentFrame
- boolean hasError
# void paintComponent(Graphics)
- void drawTiles(Graphics)
- void drawShapes(Graphics)
- void drawRobots(Graphics)
- void drawDeliveringRobot(Graphics,Robot)
- void drawReturningRobot(Graphics,Robot)
- void drawStandbyRobot(Graphics,Robot)
- void drawRequests(Graphics)
- void drawCurrentFrame(Graphics)
+ int askForNumberOfObstacles()
+ Point askForPoint()
+ boolean isAskingForNewPoint()
+ void displayRobotStatus(int,LinkedHashSet<Robot>)
+ void displayErrorMessage(String)
+ void sendMapInformation(DeliveryMap)
+ void addRequest(Point)
}

class Simulator.DeliveryMap{
 - ArrayList<Simulator.Shape> obstacles
 +void addObstacle(Shape obstacle)
 +void removeObstacle(Point p)
 +boolean isDeliveryPointValid(Point p)
 + ArrayList<Simulator.Shape> getObstacles()
}

class UI.MouseChecker {
+ void mouseClicked(MouseEvent)
+ void mousePressed(MouseEvent)
+ void mouseReleased(MouseEvent)
+ void mouseEntered(MouseEvent)
+ void mouseExited(MouseEvent)
}
class UI.KeyChecker {
+ void keyPressed(KeyEvent)
+ void keyReleased(KeyEvent)
+ void keyTyped(KeyEvent)
}

class Simulator.TrajectoryPopulation {
- ArrayList<Trajectory> individuals
- ArrayList<Shape> obstacles
- Generator generator
+ ArrayList<Trajectory> getIndividuals()
+ String toString()
+ TrajectoryPopulation tournament()
+ TrajectoryPopulation roulette()
}

interface Simulator.ShapeFactory {
~ Shape createShape()
}
class Simulator.Polygon {
+ boolean surrounds(Point)
+ boolean isIntercepted(LineSegment)
}

interface UI.SimulatorUI {
~ int askForNumberOfObstacles()
~ Point askForPoint()
~ boolean isAskingForNewPoint()
~ void displayRobotStatus(int,LinkedHashSet<Robot>)
~ void displayErrorMessage(String)
~ void sendMapInformation(DeliveryMap)
~ void addRequest(Point)
}
class Simulator.RobotManager {
- Set<Robot> subscribers
- RequestQueue requests
- PriorityQueue<Robot> distanceSortedSubscribers
- void addSubscriber(Robot)
- void removeSubscriber(Robot)
- void updateSortedSubscribers(Robot)
+ void update()
+ void notify(Robot,RobotPowerState)
+ void addRequest(Point)
+ Queue<Point> getRequests()
+ Set<Robot> getSubscribers()
+ Point getNextRequest()
}
class Simulator.Circle {
- double r
+ double getRadius()
+ boolean surrounds(Point)
+ boolean isIntercepted(LineSegment)
}
class Simulator.Robot {
- Point currentPosition
- Generator generator
- double energy
- RobotPowerState powerState
- Point chargingStation
- Iterator<Point> trajectoryPointIterator
- RobotManager manager
- int CACHE_SIZE
- Map<String,Trajectory> trajectoryCache
- DeliveryMap deliveryMap
+ RobotPowerState getPowerState()
+ void subscribeToManager(RobotManager)
+ double getEnergy()
+ void update()
+ boolean canReachDestination(Trajectory)
+ int distanceToDestination(Point,Point)
+ int distanceToChargingStation()
+ Point getChargingStation()
+ void setPath(Trajectory)
+ String toString()
- void moveToNextPosition()
- void goToChargingStation()
+ Trajectory findTrajectory(Point,Point)
+ double getDistanceToNextRequest()
+ Point getCurrentPosition()
}
abstract class Simulator.Shape {
# Point[] points
+ {abstract}boolean surrounds(Point)
+ {abstract}boolean isIntercepted(LineSegment)
+ Point[] getPoints()
}

class Simulator.CircleFactory {
- Generator generator
+ Shape createShape()
}
class Simulator.RequestQueue {
- Queue<Point> requests
+ void addRequest(Point)
+ Point getNextRequest()
+ void removeRequest()
+ boolean isEmpty()
+ int size()
+ Queue<Point> getRequests()
}
class UI.SimulatorCLI {
- Scanner sc
+ int askForNumberOfObstacles()
+ Point askForPoint()
+ boolean isAskingForNewPoint()
+ void displayRobotStatus(int,LinkedHashSet<Robot>)
+ void displayErrorMessage(String)
+ void sendMapInformation(DeliveryMap)
+ void addRequest(Point)
}

class Simulator.Trajectory {
- ArrayList<Point> points
- double length
+ Generator generator
- int collisionCount
- ArrayList<Shape> obstacles
+ String toString()
+ ArrayList<Point> calculatePointsAlongTrajectory()
+ int nCollisions()
+ double fitness()
+ Trajectory[] onePointCrossover(Trajectory)
+ Trajectory[] uniformCrossover(Trajectory)
+ void mutate(double)
+ boolean equals(Object)
+ void addPoint(double)
+ void removePoint(double)
+ int hashCode()
+ ArrayList<Point> getPoints()
+ double getLength()
}
class Simulator.Planner {
- TrajectoryPopulation population
- double pm
- double pa
- double pr
- Generator generator
- ArrayList<Shape> obstacles
+ Trajectory findTrajectory()
- Trajectory getBestTrajectory(TrajectoryPopulation)
- ArrayList<Trajectory> generateOffspring(TrajectoryPopulation)
- void applyMutations(ArrayList<Trajectory>)
}
class Simulator.Triangle {
}
class Simulator.Generator {
+ Point generateGaussianPoint(double,Point,Point)
+ Shape generateShape(String)
}
class Simulator.Simulator {
- SimulatorUI ui
+ boolean validInputCheck(DeliveryMap,Point)
- LinkedHashSet<Robot> initializeRobots(Generator,DeliveryMap)
- ArrayList<Shape> generateRandomObstacles(Generator)
+ void startSimulation()
}

class Simulator.RectangleFactory {
- Generator generator
+ Shape createShape()
}
class Simulator.Point{
-int x
-int y
+double dist(Point)
}
class Simulator.LineSegment{
- Point p1
- Point p2
- boolean ccw(Point,Point,Point)
+ boolean intercepts(LineSegment)
+ double length()
+ ArrayList<Point> drawLine()
+ double shortestDistance(Point)
}

Simulator.Polygon <|-- Simulator.Rectangle
Simulator.ShapeFactory <|.. Simulator.TriangleFactory
UI.SimulatorUI <|.. UI.SimulatorGUI
UI.JPanel <|-- UI.SimulatorGUI
UI.SimulatorGUI +.. UI.SimulatorGUI.MouseChecker

UI.MouseListener <|.. UI.MouseChecker
UI.SimulatorGUI +.. UI.SimulatorGUI.KeyChecker
UI.KeyListener <|.. UI.KeyChecker
Simulator.Shape <|-- Simulator.Polygon
Simulator.Shape <|-- Simulator.Circle
Simulator.ShapeFactory <|.. Simulator.CircleFactory
UI.SimulatorUI <|.. UI.SimulatorCLI
Simulator.Polygon <|-- Simulator.Triangle
java.util.Random <|-- Simulator.Generator
Simulator.ShapeFactory <|.. Simulator.RectangleFactory
UI.SimulatorUI - Simulator.Simulator
Simulator.Robot *-- Simulator.RobotPowerState
Simulator.TrajectoryPopulation *-- Simulator.Trajectory
Simulator.Planner *-- Simulator.TrajectoryPopulation
Simulator.Robot *-- Simulator.Planner
Simulator.Simulator *-- Simulator.DeliveryMap
Simulator.Simulator *-- Simulator.RobotManager
Simulator.Simulator *-- Simulator.Generator
Simulator.RobotManager o-- Simulator.Robot
Simulator.DeliveryMap o-- Simulator.Shape
Simulator.ShapeFactory *-- Simulator.Shape
Simulator.LineSegment o-- Simulator.Point
Simulator.Polygon o-- Simulator.LineSegment
Simulator.Shape o-- Simulator.Point
Simulator.Simulator *-- Simulator.RequestQueue
Simulator.RobotManager o-- Simulator.RequestQueue
Simulator.Trajectory *-- Simulator.Point
Simulator.Planner - Simulator.DeliveryMap
UI.SimulatorGUI *-- UI.MouseChecker
UI.SimulatorGUI *-- UI.KeyChecker
Simulator.CircleFactory *-- Simulator.Circle
Simulator.RectangleFactory *-- Simulator.Rectangle
Simulator.TriangleFactory *-- Simulator.Triangle
Simulator.Generator *-- Simulator.ShapeFactory
Simulator.Generator *-- Simulator.Point
@enduml